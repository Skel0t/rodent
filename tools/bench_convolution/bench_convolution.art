#[export]
fn @sres_dump(in_mat: &Buffer, flattened_kernels: &Buffer, biases: &[f32], out: &Buffer) -> () {
    let height = 540;
    let width  = 960;
    let ksize = 5;
    let in_channels = 64;
    let out_channels = 32;

    let size_im2col  = (ksize as i64) * (ksize as i64) * (in_channels as i64) * (width as i64) * (height as i64);  // size for im2col matrix

    let mat = make_matrix(*in_mat, 0, MemoryFormat::CHW, in_channels, height, width);
    let kernel = make_matrix(*flattened_kernels, 0, MemoryFormat::CHW, 1, out_channels, ksize * ksize * in_channels);
    let biases_ho = @|i: i32| { biases(i) };

    if cpu_profiling_enabled {
        im2col_counter = 0;
        matmul_counter = 0;
    }

    let nn_int = get_cpu_nn();

    conv2d(nn_int, ksize, out_channels, kernel, biases_ho, id, mat, *out, 0, size_im2col);

    if cpu_profiling_enabled {
        let total_counter = matmul_counter + im2col_counter;
        fn @print_counter(counter: i64, name: &[u8]) -> () {
            print_string(name);
            print_string(": ");
            print_i64(counter);
            print_string(" (");
            print_i64(counter * 100 / total_counter);
            print_string("%)\n");
        }
        print_counter(im2col_counter, "im2col");
        print_counter(matmul_counter, "matmul");
        print_string("\n");
    }
}

#[export]
fn @im2col_dump(in_buf: &Buffer, out_buf: &Buffer) -> () {
    let ksize = 3;
    // let out_channels = 70;
    let in_channels = 70;
    let in_cols = 32;
    let in_rows = 32;

    let padding    = ksize / 2;
    let out_width  = (in_cols + 2 * padding - ksize) + 1;
    let out_height = (in_rows + 2 * padding - ksize) + 1;

    let in_mat = make_matrix(*in_buf, 0, MemoryFormat::CHW, in_channels, in_rows, in_cols);
    let acc = get_mat_acc(in_mat);
    let off = 0 as i64;

    im2col_cpu(ksize, out_width, out_height, in_cols, in_rows, in_channels, acc, padding, *out_buf, off);
}

#[export]
fn @test(buf_ptr: &Buffer) -> () {
    let buf = (*buf_ptr);

    let bc_buf = bitcast[&mut[f32]](buf.data);

    let acc = cuda_accelerator(0);

    for _item in acc.exec((1, 1, 1), (1, 1, 1)) {
        bc_buf(0) = 4.51;
    }
    print_string("\n");
}
