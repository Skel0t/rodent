/* Decide how to iterate by checking MemoryFormat */
fn @iterate_matrix(body: fn(AccM, f32, i32, i32, i32) -> ()) {
	let loop_chw = iterate_matrix_chw(body);
	let loop_hwc = iterate_matrix_hwc(body);
	fn @loop(mat: Matrix) -> () {
		match mat.format {
			MemoryFormat::CHW => loop_chw(mat),
			MemoryFormat::HWC => loop_hwc(mat)
		}
	}

	loop
}

/* If a specific iteration is necessary, one can choose it here */
fn @iterate_matrix_hwc(body: fn(AccM, f32, i32, i32, i32) -> ()) {
	fn @loop(mat: Matrix) -> () {
		let acc = get_mat_acc(mat);
        for row in range(0, mat.rows) {
            for col in range(0, mat.cols) {
				for chn in range(0, mat.channels) {
                	@body(acc, acc.read(row, col, chn), row, col, chn);
				}
            }
        }
	}

	loop
}

fn @iterate_matrix_chw(body: fn(AccM, f32, i32, i32, i32) -> ()) {
	fn @loop(mat: Matrix) -> () {
		let acc = get_mat_acc(mat);
		for chn in range(0, mat.channels) {
			for row in range(0, mat.rows) {
				for col in range(0, mat.cols) {
					@body(acc, acc.read(row, col, chn), row, col, chn);
				}
			}
        }
	}

	loop
}

/* Same as not parallel. */
fn @iterate_matrix_par(body: fn(AccM, f32, i32, i32, i32) -> ()) {
	let loop_chw = iterate_matrix_chw_par(body);
	let loop_hwc = iterate_matrix_hwc_par(body);
	fn @loop(mat: Matrix) -> () {
		match mat.format {
			MemoryFormat::CHW => loop_chw(mat),
			MemoryFormat::HWC => loop_hwc(mat)
		}
	}

	loop
}

fn @iterate_matrix_hwc_par(body: fn(AccM, f32, i32, i32, i32) -> ()) {
	fn @loop(mat: Matrix) -> () {
		let acc = get_mat_acc(mat);
        for row in parallel(0, 0, mat.rows) {
            for col in range(0, mat.cols) {
				for chn in range(0, mat.channels) {
                	@body(acc, acc.read(row, col, chn), row, col, chn);
				}
            }
        }
	}

	loop
}

fn @iterate_matrix_chw_par(body: fn(AccM, f32, i32, i32, i32) -> ()) {
	fn @loop(mat: Matrix) -> () {
		let acc = get_mat_acc(mat);
		for chn in parallel(0, 0, mat.channels) {
			for row in range(0, mat.rows) {
				for col in range(0, mat.cols) {
					@body(acc, acc.read(row, col, chn), row, col, chn);
				}
			}
        }
	}

	loop
}

fn @parallel_step(body: fn(i32) -> ()) {
    fn @loop(beg: i32, end: i32, step: i32) -> () {
        let iterations = (end - beg) / step;
        for i in parallel(0, 0, iterations) {
            let cur = beg + i * step;
            @@body(cur)
        }
    }

    loop
}
